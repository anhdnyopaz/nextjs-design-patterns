import CodeExample from './CodeExample';

export default function LearningSection() {
  const providerCode = `// Provider Pattern - UserProvider.tsx
import React, { createContext, useContext, useReducer, ReactNode, useCallback } from 'react';

// Types Definition
interface User {
  id: string;
  name: string;
  email: string;
  role: 'admin' | 'user' | 'guest';
}

interface UserState {
  currentUser: User | null;
  users: User[];
  loading: boolean;
  error: string | null;
}

type UserAction =
  | { type: 'SET_LOADING'; payload: boolean }
  | { type: 'SET_ERROR'; payload: string | null }
  | { type: 'SET_CURRENT_USER'; payload: User | null }
  | { type: 'SET_USERS'; payload: User[] }
  | { type: 'ADD_USER'; payload: User }
  | { type: 'UPDATE_USER'; payload: User }
  | { type: 'DELETE_USER'; payload: string };

// Reducer Function
function userReducer(state: UserState, action: UserAction): UserState {
  switch (action.type) {
    case 'SET_LOADING':
      return { ...state, loading: action.payload };
    case 'SET_ERROR':
      return { ...state, error: action.payload, loading: false };
    case 'SET_CURRENT_USER':
      return { ...state, currentUser: action.payload };
    case 'SET_USERS':
      return { ...state, users: action.payload, loading: false };
    case 'ADD_USER':
      return { ...state, users: [...state.users, action.payload] };
    default:
      return state;
  }
}

// Provider Component
export function UserProvider({ children }: { children: ReactNode }) {
  const [state, dispatch] = useReducer(userReducer, initialState);

  // Action helpers v·ªõi useCallback ƒë·ªÉ tr√°nh re-render
  const fetchUsers = useCallback(async () => {
    dispatch({ type: 'SET_LOADING', payload: true });
    try {
      const mockUsers: User[] = [
        { id: '1', name: 'Nguy·ªÖn VƒÉn A', email: 'a@example.com', role: 'admin' },
        { id: '2', name: 'Tr·∫ßn Th·ªã B', email: 'b@example.com', role: 'user' },
        { id: '3', name: 'L√™ VƒÉn C', email: 'c@example.com', role: 'guest' },
      ];
      dispatch({ type: 'SET_USERS', payload: mockUsers });
    } catch (error) {
      dispatch({ type: 'SET_ERROR', payload: 'Failed to fetch users' });
    }
  }, []);

  const value: UserContextType = {
    state, dispatch, fetchUsers, login, logout, addUser, updateUser, deleteUser,
  };

  return (
    <UserContext.Provider value={value}>
      {children}
    </UserContext.Provider>
  );
}

// Custom Hook
export function useUser() {
  const context = useContext(UserContext);
  if (context === undefined) {
    throw new Error('useUser must be used within a UserProvider');
  }
  return context;
}`;

  const repositoryCode = `// Repository Pattern - UserRepository.ts
import { User } from './UserProvider';

// Repository Interface - Contract for data access
export interface IUserRepository {
  getAll(): Promise<User[]>;
  getById(id: string): Promise<User | null>;
  create(user: Omit<User, 'id'>): Promise<User>;
  update(id: string, user: Partial<User>): Promise<User>;
  delete(id: string): Promise<boolean>;
  search(query: string): Promise<User[]>;
}

// Mock Implementation cho development/testing
export class MockUserRepository implements IUserRepository {
  private users: User[] = [
    { id: '1', name: 'Nguy·ªÖn VƒÉn A', email: 'a@example.com', role: 'admin' },
    { id: '2', name: 'Tr·∫ßn Th·ªã B', email: 'b@example.com', role: 'user' },
    { id: '3', name: 'L√™ VƒÉn C', email: 'c@example.com', role: 'guest' },
  ];

  async getAll(): Promise<User[]> {
    // Simulate network delay
    await this.delay(500);
    return [...this.users];
  }

  async create(userData: Omit<User, 'id'>): Promise<User> {
    await this.delay(300);
    const newUser: User = {
      ...userData,
      id: (this.users.length + 1).toString(),
    };
    this.users.push(newUser);
    return newUser;
  }

  async delete(id: string): Promise<boolean> {
    await this.delay(200);
    const index = this.users.findIndex(user => user.id === id);
    if (index === -1) return false;
    
    this.users.splice(index, 1);
    return true;
  }

  async search(query: string): Promise<User[]> {
    await this.delay(400);
    const lowercaseQuery = query.toLowerCase();
    return this.users.filter(user =>
      user.name.toLowerCase().includes(lowercaseQuery) ||
      user.email.toLowerCase().includes(lowercaseQuery)
    );
  }

  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// API Implementation cho production
export class ApiUserRepository implements IUserRepository {
  private baseUrl = '/api/users';

  async getAll(): Promise<User[]> {
    try {
      const response = await fetch(this.baseUrl);
      if (!response.ok) throw new Error('Failed to fetch users');
      return await response.json();
    } catch (error) {
      console.error('Error fetching users:', error);
      throw error;
    }
  }

  async create(userData: Omit<User, 'id'>): Promise<User> {
    try {
      const response = await fetch(this.baseUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userData),
      });
      if (!response.ok) throw new Error('Failed to create user');
      return await response.json();
    } catch (error) {
      console.error('Error creating user:', error);
      throw error;
    }
  }
  
  // ... other methods
}

// Factory Pattern ƒë·ªÉ choose repository
export class UserRepositoryFactory {
  static create(type: 'api' | 'mock' | 'localStorage' = 'mock'): IUserRepository {
    switch (type) {
      case 'api':
        return new ApiUserRepository();
      case 'localStorage':
        return new LocalStorageUserRepository();
      case 'mock':
      default:
        return new MockUserRepository();
    }
  }
}`;

  const observerCode = `// Observer Pattern - StateObserver.ts
export interface StateChangeEvent<T = any> {
  type: string;
  payload: T;
  timestamp: number;
  source: string;
}

export interface IObserver<T = any> {
  id: string;
  update(event: StateChangeEvent<T>): void;
}

export interface ISubject<T = any> {
  subscribe(observer: IObserver<T>): void;
  unsubscribe(observerId: string): void;
  notify(event: StateChangeEvent<T>): void;
}

// Base Observer Class
export abstract class BaseObserver<T = any> implements IObserver<T> {
  public readonly id: string;

  constructor(id?: string) {
    this.id = id || \`observer_\${Date.now()}_\${Math.random().toString(36).substr(2, 9)}\`;
  }

  abstract update(event: StateChangeEvent<T>): void;
}

// Concrete Observer - Logger
export class LoggerObserver extends BaseObserver {
  constructor(private logLevel: 'info' | 'debug' | 'warn' = 'info') {
    super('logger_observer');
  }

  update(event: StateChangeEvent): void {
    const message = \`[\${new Date(event.timestamp).toISOString()}] \${event.source}: \${event.type}\`;
    
    switch (this.logLevel) {
      case 'debug':
        console.debug(message, event.payload);
        break;
      case 'warn':
        console.warn(message, event.payload);
        break;
      case 'info':
      default:
        console.info(message, event.payload);
        break;
    }
  }
}

// Global State Observer Manager - Singleton Pattern
export class GlobalStateObserver {
  private static instance: GlobalStateObserver;
  private subject: StateObserverSubject;

  private constructor() {
    this.subject = new StateObserverSubject();
    this.setupDefaultObservers();
  }

  static getInstance(): GlobalStateObserver {
    if (!GlobalStateObserver.instance) {
      GlobalStateObserver.instance = new GlobalStateObserver();
    }
    return GlobalStateObserver.instance;
  }

  private setupDefaultObservers(): void {
    // Setup default observers
    this.subject.subscribe(new LoggerObserver('info'));
    this.subject.subscribe(new AnalyticsObserver());
    this.subject.subscribe(new PersistenceObserver());
    this.subject.subscribe(new NotificationObserver());
  }

  emit<T>(event: StateChangeEvent<T>): void {
    this.subject.notify(event);
  }
}`;

  return (
    <div className="mt-16 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg shadow-lg p-8">
      <h2 className="text-3xl font-bold text-gray-800 mb-8 text-center">
        üìö H·ªçc t·∫≠p Design Patterns
      </h2>
      
      <div className="prose max-w-none">
        <CodeExample
          title="1. üè≠ Provider Pattern"
          explanation="Provider Pattern s·ª≠ d·ª•ng React Context API ƒë·ªÉ qu·∫£n l√Ω global state. N√≥ cho ph√©p chia s·∫ª d·ªØ li·ªáu gi·ªØa c√°c component m√† kh√¥ng c·∫ßn prop drilling. Trong v√≠ d·ª• n√†y, ch√∫ng ta s·ª≠ d·ª•ng useReducer ƒë·ªÉ qu·∫£n l√Ω state ph·ª©c t·∫°p v√† useCallback ƒë·ªÉ t·ªëi ∆∞u performance."
          code={providerCode}
        />

        <CodeExample
          title="2. üóÑÔ∏è Repository Pattern"
          explanation="Repository Pattern tr·ª´u t∆∞·ª£ng h√≥a data access layer, cho ph√©p ch√∫ng ta d·ªÖ d√†ng thay ƒë·ªïi implementation (API, LocalStorage, Mock) m√† kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn business logic. Factory Pattern ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t·∫°o repository instance ph√π h·ª£p."
          code={repositoryCode}
        />

        <CodeExample
          title="3. üëÅÔ∏è Observer Pattern"
          explanation="Observer Pattern cho ph√©p objects 'quan s√°t' v√† ph·∫£n ·ª©ng v·ªõi state changes. Khi c√≥ event x·∫£y ra, t·∫•t c·∫£ observers s·∫Ω ƒë∆∞·ª£c th√¥ng b√°o. ƒêi·ªÅu n√†y r·∫•t h·ªØu √≠ch cho logging, analytics, notifications, v√† persistence."
          code={observerCode}
        />
      </div>

      <div className="mt-12 bg-blue-50 rounded-lg p-6 border border-blue-200">
        <h3 className="text-2xl font-bold text-blue-800 mb-4">üéØ L·ª£i √≠ch c·ªßa c√°c Patterns</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div>
            <h4 className="font-semibold text-blue-700 mb-2">üè≠ Provider Pattern</h4>
            <ul className="text-sm text-blue-600 space-y-1">
              <li>‚Ä¢ Tr√°nh prop drilling</li>
              <li>‚Ä¢ Centralized state management</li>
              <li>‚Ä¢ Type-safe v·ªõi TypeScript</li>
              <li>‚Ä¢ Performance optimization v·ªõi useCallback</li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold text-green-700 mb-2">üóÑÔ∏è Repository Pattern</h4>
            <ul className="text-sm text-green-600 space-y-1">
              <li>‚Ä¢ Separation of concerns</li>
              <li>‚Ä¢ Easy testing v·ªõi mock implementations</li>
              <li>‚Ä¢ Flexibility ƒë·ªÉ switch data sources</li>
              <li>‚Ä¢ Consistent interface cho data access</li>
            </ul>
          </div>
          <div>
            <h4 className="font-semibold text-purple-700 mb-2">üëÅÔ∏è Observer Pattern</h4>
            <ul className="text-sm text-purple-600 space-y-1">
              <li>‚Ä¢ Loose coupling between objects</li>
              <li>‚Ä¢ Real-time notifications</li>
              <li>‚Ä¢ Easy to add new observers</li>
              <li>‚Ä¢ Event-driven architecture</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
} 