'use client';

import React from 'react';
import CodeExample from './CodeExample';
import ErrorBoundaryDemo from './ErrorBoundaryDemo';
import RetryPatternDemo from './RetryPatternDemo';
import CircuitBreakerDemo from './CircuitBreakerDemo';

const errorBoundaryCode = `// Error Boundary Class Component
import React, { Component, ReactNode } from 'react';

interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
  errorInfo?: React.ErrorInfo;
}

interface ErrorBoundaryProps {
  children: ReactNode;
  fallback?: ReactNode;
  onError?: (error: Error, errorInfo: React.ErrorInfo) => void;
}

class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    // C·∫≠p nh·∫≠t state ƒë·ªÉ hi·ªÉn th·ªã fallback UI
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {
    // Log l·ªói cho monitoring
    console.error('Error Boundary caught an error:', error, errorInfo);
    
    // G·ªçi custom error handler n·∫øu c√≥
    if (this.props.onError) {
      this.props.onError(error, errorInfo);
    }
  }

  render() {
    if (this.state.hasError) {
      return this.props.fallback || <div>Something went wrong.</div>;
    }

    return this.props.children;
  }
}

// S·ª≠ d·ª•ng Error Boundary
function App() {
  return (
    <ErrorBoundary fallback={<div>Oops! Something went wrong</div>}>
      <MyComponent />
    </ErrorBoundary>
  );
}`;

const retryPatternCode = `// Retry Hook v·ªõi Exponential Backoff
import { useState, useCallback } from 'react';

function useRetry<T>(
  fn: () => Promise<T>,
  maxRetries: number = 3,
  delay: number = 1000,
  backoffMultiplier: number = 2
) {
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<Error | null>(null);
  const [retryCount, setRetryCount] = useState(0);

  const execute = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    let currentRetry = 0;

    const attemptFn = async (): Promise<T> => {
      try {
        const result = await fn();
        setRetryCount(currentRetry);
        return result;
      } catch (err) {
        currentRetry++;
        setRetryCount(currentRetry);

        if (currentRetry >= maxRetries) {
          throw err;
        }

        // Exponential backoff v·ªõi jitter
        const currentDelay = delay * Math.pow(backoffMultiplier, currentRetry - 1);
        const jitter = Math.random() * 100; // Random jitter
        
        await new Promise(resolve => 
          setTimeout(resolve, currentDelay + jitter)
        );
        
        return attemptFn();
      }
    };

    try {
      const result = await attemptFn();
      return result;
    } catch (err) {
      setError(err as Error);
      throw err;
    } finally {
      setIsLoading(false);
    }
  }, [fn, maxRetries, delay, backoffMultiplier]);

  return { execute, isLoading, error, retryCount };
}

// S·ª≠ d·ª•ng Retry Hook
function MyComponent() {
  const apiCall = () => fetch('/api/data').then(res => res.json());
  const { execute, isLoading, error, retryCount } = useRetry(apiCall, 3);

  return (
    <div>
      <button onClick={execute} disabled={isLoading}>
        {isLoading ? \`ƒêang th·ª≠ l·∫°i... (\${retryCount})\` : 'Call API'}
      </button>
      {error && <p>Error: {error.message}</p>}
    </div>
  );
}`;

const circuitBreakerCode = `// Circuit Breaker Implementation
enum CircuitState {
  CLOSED = 'CLOSED',
  OPEN = 'OPEN',
  HALF_OPEN = 'HALF_OPEN'
}

interface CircuitBreakerConfig {
  failureThreshold: number;
  resetTimeout: number;
  successThreshold?: number;
}

function useCircuitBreaker<T>(
  fn: () => Promise<T>,
  config: CircuitBreakerConfig
) {
  const [state, setState] = useState<CircuitState>(CircuitState.CLOSED);
  const [failureCount, setFailureCount] = useState(0);
  const [successCount, setSuccessCount] = useState(0);
  const [lastFailureTime, setLastFailureTime] = useState<number | null>(null);

  const execute = useCallback(async () => {
    // Ki·ªÉm tra xem c√≥ th·ªÉ chuy·ªÉn t·ª´ OPEN sang HALF_OPEN kh√¥ng
    if (state === CircuitState.OPEN && lastFailureTime) {
      const timeSinceLastFailure = Date.now() - lastFailureTime;
      if (timeSinceLastFailure >= config.resetTimeout) {
        setState(CircuitState.HALF_OPEN);
        setSuccessCount(0);
      } else {
        throw new Error('Circuit breaker is OPEN');
      }
    }

    // T·ª´ ch·ªëi request n·∫øu circuit ƒëang OPEN
    if (state === CircuitState.OPEN) {
      throw new Error('Circuit breaker is OPEN');
    }

    try {
      const result = await fn();

      // X·ª≠ l√Ω success trong HALF_OPEN state
      if (state === CircuitState.HALF_OPEN) {
        const newSuccessCount = successCount + 1;
        setSuccessCount(newSuccessCount);
        
        if (newSuccessCount >= (config.successThreshold || 1)) {
          setState(CircuitState.CLOSED);
          setFailureCount(0);
          setSuccessCount(0);
        }
      }

      return result;
    } catch (err) {
      const newFailureCount = failureCount + 1;
      setFailureCount(newFailureCount);
      setLastFailureTime(Date.now());

      // M·ªü circuit n·∫øu ƒë·∫°t threshold
      if (newFailureCount >= config.failureThreshold) {
        setState(CircuitState.OPEN);
      }

      throw err;
    }
  }, [fn, state, failureCount, successCount, lastFailureTime, config]);

  return { execute, state, failureCount, successCount };
}

// S·ª≠ d·ª•ng Circuit Breaker
function ApiComponent() {
  const apiCall = () => fetch('/api/unreliable').then(res => res.json());
  
  const { execute, state, failureCount } = useCircuitBreaker(apiCall, {
    failureThreshold: 3,
    resetTimeout: 5000,
    successThreshold: 2
  });

  return (
    <div>
      <p>Circuit State: {state}</p>
      <p>Failures: {failureCount}</p>
      <button onClick={execute}>Call API</button>
    </div>
  );
}`;

const combiningPatternsCode = `// K·∫øt h·ª£p Error Handling Patterns
import React from 'react';

// Error Boundary v·ªõi Retry v√† Circuit Breaker
function RobustComponent() {
  const apiCall = () => fetch('/api/data').then(res => res.json());
  
  // Circuit Breaker
  const { execute: circuitExecute, state } = useCircuitBreaker(apiCall, {
    failureThreshold: 3,
    resetTimeout: 10000
  });
  
  // Retry v·ªõi Circuit Breaker
  const { execute: retryExecute, isLoading, error } = useRetry(
    circuitExecute,
    3,
    1000,
    2
  );

  return (
    <ErrorBoundary 
      fallback={<div>Component g·∫∑p l·ªói nghi√™m tr·ªçng!</div>}
      onError={(error, errorInfo) => {
        // Log error cho monitoring service
        console.error('Component error:', error, errorInfo);
      }}
    >
      <div>
        <h3>Robust API Component</h3>
        <p>Circuit State: {state}</p>
        
        <button 
          onClick={retryExecute} 
          disabled={isLoading || state === 'OPEN'}
        >
          {isLoading ? 'Loading...' : 'Call API'}
        </button>
        
        {error && (
          <div className="error">
            Error: {error.message}
          </div>
        )}
        
        {state === 'OPEN' && (
          <div className="warning">
            Circuit breaker is open. API calls are blocked.
          </div>
        )}
      </div>
    </ErrorBoundary>
  );
}

// Global Error Handler
function GlobalErrorHandler({ children }: { children: React.ReactNode }) {
  const handleError = (error: Error, errorInfo: React.ErrorInfo) => {
    // Send to monitoring service
    if (process.env.NODE_ENV === 'production') {
      // sendToMonitoring(error, errorInfo);
    }
    
    // Log locally
    console.error('Global error:', error, errorInfo);
  };

  return (
    <ErrorBoundary onError={handleError}>
      {children}
    </ErrorBoundary>
  );
}`;

export default function ErrorHandlingLearningSection() {
  return (
    <div className="min-h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50">
      <div className="container mx-auto px-4 py-12">
        {/* Header */}
        <div className="text-center mb-16">
          <div className="inline-flex items-center justify-center p-4 bg-gradient-to-r from-red-500 to-pink-600 rounded-2xl mb-6">
            <span className="text-4xl">üö®</span>
          </div>
          <h1 className="text-5xl font-bold text-gray-900 mb-6">
            Error Handling Patterns
            <span className="block text-2xl font-normal text-gray-600 mt-2">
              (C√°c Pattern x·ª≠ l√Ω l·ªói)
            </span>
          </h1>
          <p className="text-xl text-gray-700 max-w-3xl mx-auto leading-relaxed">
            H·ªçc c√°c pattern quan tr·ªçng ƒë·ªÉ x√¢y d·ª±ng ·ª©ng d·ª•ng React robust (m·∫°nh m·∫Ω) v√† fault-tolerant (ch·ªãu l·ªói). 
            Bao g·ªìm Error Boundary, Retry Pattern, v√† Circuit Breaker v·ªõi demos t∆∞∆°ng t√°c.
          </p>
        </div>

        {/* Pattern Overview */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-8 mb-16">
          <div className="bg-white rounded-2xl shadow-lg p-8 border-l-4 border-red-500">
            <div className="flex items-center gap-4 mb-4">
              <span className="text-3xl">üõ°Ô∏è</span>
              <h3 className="text-xl font-bold text-gray-900">Error Boundary</h3>
            </div>
            <p className="text-gray-600 leading-relaxed">
              B·∫Øt l·ªói JavaScript trong component tree v√† hi·ªÉn th·ªã fallback UI thay v√¨ crash to√†n b·ªô ·ª©ng d·ª•ng.
            </p>
          </div>

          <div className="bg-white rounded-2xl shadow-lg p-8 border-l-4 border-orange-500">
            <div className="flex items-center gap-4 mb-4">
              <span className="text-3xl">üîÑ</span>
              <h3 className="text-xl font-bold text-gray-900">Retry Pattern</h3>
            </div>
            <p className="text-gray-600 leading-relaxed">
              T·ª± ƒë·ªông th·ª≠ l·∫°i c√°c operations th·∫•t b·∫°i v·ªõi exponential backoff v√† jitter ƒë·ªÉ x·ª≠ l√Ω transient failures.
            </p>
          </div>

          <div className="bg-white rounded-2xl shadow-lg p-8 border-l-4 border-yellow-500">
            <div className="flex items-center gap-4 mb-4">
              <span className="text-3xl">‚ö°</span>
              <h3 className="text-xl font-bold text-gray-900">Circuit Breaker</h3>
            </div>
            <p className="text-gray-600 leading-relaxed">
              NgƒÉn ch·∫∑n cascade failures b·∫±ng c√°ch ng·ª´ng g·ªçi failing services v√† cho ph√©p ch√∫ng recover.
            </p>
          </div>
        </div>

        {/* Error Boundary Section */}
        <section className="mb-16">
          <div className="flex items-center gap-4 mb-8">
            <span className="text-4xl">üõ°Ô∏è</span>
            <div>
              <h2 className="text-3xl font-bold text-gray-900">
                Error Boundary Pattern
              </h2>
              <p className="text-gray-600">
                B·∫Øt v√† x·ª≠ l√Ω l·ªói JavaScript trong React component tree
              </p>
            </div>
          </div>

          <CodeExample
            title="Error Boundary Implementation"
            code={errorBoundaryCode}
            explanation="Error Boundary l√† React component b·∫Øt l·ªói JavaScript ·ªü b·∫•t k·ª≥ ƒë√¢u trong component tree con c·ªßa n√≥, log nh·ªØng l·ªói ƒë√≥, v√† hi·ªÉn th·ªã fallback UI thay v√¨ crash component tree."
          />

          <ErrorBoundaryDemo />
        </section>

        {/* Retry Pattern Section */}
        <section className="mb-16">
          <div className="flex items-center gap-4 mb-8">
            <span className="text-4xl">üîÑ</span>
            <div>
              <h2 className="text-3xl font-bold text-gray-900">
                Retry Pattern
              </h2>
              <p className="text-gray-600">
                T·ª± ƒë·ªông th·ª≠ l·∫°i operations th·∫•t b·∫°i v·ªõi c√°c chi·∫øn l∆∞·ª£c backoff kh√°c nhau
              </p>
            </div>
          </div>

          <CodeExample
            title="Retry Hook v·ªõi Exponential Backoff"
            code={retryPatternCode}
            explanation="Retry Pattern gi√∫p x·ª≠ l√Ω transient failures (l·ªói t·∫°m th·ªùi) b·∫±ng c√°ch t·ª± ƒë·ªông th·ª≠ l·∫°i operation v·ªõi delay tƒÉng d·∫ßn (exponential backoff) v√† th√™m random jitter ƒë·ªÉ tr√°nh thundering herd problem."
          />

          <RetryPatternDemo />
        </section>

        {/* Circuit Breaker Section */}
        <section className="mb-16">
          <div className="flex items-center gap-4 mb-8">
            <span className="text-4xl">‚ö°</span>
            <div>
              <h2 className="text-3xl font-bold text-gray-900">
                Circuit Breaker Pattern
              </h2>
              <p className="text-gray-600">
                NgƒÉn ch·∫∑n cascade failures v√† cho ph√©p failing services recover
              </p>
            </div>
          </div>

          <CodeExample
            title="Circuit Breaker Implementation"
            code={circuitBreakerCode}
            explanation="Circuit Breaker pattern ngƒÉn ch·∫∑n ·ª©ng d·ª•ng li√™n t·ª•c th·ª≠ g·ªçi service ƒëang fail. N√≥ c√≥ 3 states: CLOSED (b√¨nh th∆∞·ªùng), OPEN (ch·∫∑n calls), HALF_OPEN (test recovery)."
          />

          <CircuitBreakerDemo />
        </section>

        {/* Combining Patterns Section */}
        <section className="mb-16">
          <div className="flex items-center gap-4 mb-8">
            <span className="text-4xl">üîß</span>
            <div>
              <h2 className="text-3xl font-bold text-gray-900">
                K·∫øt h·ª£p c√°c Patterns
              </h2>
              <p className="text-gray-600">
                C√°ch k·∫øt h·ª£p Error Boundary, Retry, v√† Circuit Breaker ƒë·ªÉ t·∫°o solution robust
              </p>
            </div>
          </div>

          <CodeExample
            title="Combining Error Handling Patterns"
            code={combiningPatternsCode}
            explanation="Trong production, b·∫°n th∆∞·ªùng c·∫ßn k·∫øt h·ª£p nhi·ªÅu patterns ƒë·ªÉ t·∫°o ra m·ªôt solution to√†n di·ªán. Error Boundary b·∫Øt runtime errors, Retry x·ª≠ l√Ω transient failures, v√† Circuit Breaker ngƒÉn cascade failures."
          />
        </section>

        {/* Best Practices */}
        <section className="mb-16">
          <div className="bg-white rounded-2xl shadow-lg p-8">
            <div className="flex items-center gap-4 mb-6">
              <span className="text-4xl">üìã</span>
              <h2 className="text-3xl font-bold text-gray-900">Best Practices</h2>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-4">Error Boundary</h3>
                <ul className="space-y-2 text-gray-700">
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    ƒê·∫∑t Error Boundary ·ªü multiple levels trong component tree
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    Log errors cho monitoring v√† debugging
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    Cung c·∫•p meaningful fallback UI
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    Kh√¥ng b·∫Øt errors trong event handlers
                  </li>
                </ul>
              </div>

              <div>
                <h3 className="text-xl font-semibold text-gray-900 mb-4">Retry & Circuit Breaker</h3>
                <ul className="space-y-2 text-gray-700">
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    Ch·ªâ retry cho transient errors (5xx, network issues)
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    S·ª≠ d·ª•ng exponential backoff v·ªõi jitter
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    Gi·ªõi h·∫°n s·ªë l·∫ßn retry ƒë·ªÉ tr√°nh infinite loops
                  </li>
                  <li className="flex items-start gap-2">
                    <span className="text-green-500 mt-1">‚úì</span>
                    Monitor circuit breaker metrics
                  </li>
                </ul>
              </div>
            </div>
          </div>
        </section>

        {/* When to Use */}
        <section>
          <div className="bg-gradient-to-r from-red-50 to-orange-50 rounded-2xl p-8 border-l-4 border-red-500">
            <div className="flex items-center gap-4 mb-6">
              <span className="text-4xl">üéØ</span>
              <h2 className="text-3xl font-bold text-gray-900">Khi n√†o s·ª≠ d·ª•ng?</h2>
            </div>

            <div className="space-y-6">
              <div>
                <h3 className="text-xl font-semibold text-red-800 mb-2">Error Boundary</h3>
                <p className="text-red-700">
                  S·ª≠ d·ª•ng cho t·∫•t c·∫£ React applications ƒë·ªÉ ngƒÉn crashes v√† cung c·∫•p better UX. 
                  ƒê·∫∑c bi·ªát quan tr·ªçng cho production apps v√† khi integrate third-party components.
                </p>
              </div>

              <div>
                <h3 className="text-xl font-semibold text-orange-800 mb-2">Retry Pattern</h3>
                <p className="text-orange-700">
                  Ideal cho API calls, file uploads, v√† operations c√≥ th·ªÉ fail temporarily. 
                  Kh√¥ng s·ª≠ d·ª•ng cho user actions nh∆∞ form submissions ƒë·ªÉ tr√°nh duplicate data.
                </p>
              </div>

              <div>
                <h3 className="text-xl font-semibold text-yellow-800 mb-2">Circuit Breaker</h3>
                <p className="text-yellow-700">
                  Essential cho microservices architecture v√† khi g·ªçi external APIs. 
                  Gi√∫p ngƒÉn cascade failures v√† improve system resilience.
                </p>
              </div>
            </div>
          </div>
        </section>
      </div>
    </div>
  );
} 